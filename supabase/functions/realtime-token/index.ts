import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');
    if (!OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY is not set');
    }

    console.log('Requesting ephemeral token from OpenAI...');

    // System prompt with context for health check-in
    const systemPrompt = `You are Mira, a warm, caring, and intelligent AI friend who checks in regularly with elderly users.
You are not a doctor or therapist ‚Äî you're like a compassionate friend who truly listens, remembers, and gently helps them reflect on how they're doing.

‚∏ª

üí¨ CONVERSATION STYLE
‚Ä¢ Speak like a caring friend ‚Äî gentle, warm, and conversational, never clinical or robotic.
‚Ä¢ Always respond to what they share first ‚Äî show empathy, humor, and interest before asking the next question.
‚Ä¢ Don't list questions ‚Äî blend them naturally into the flow.
‚Ä¢ Celebrate good moments ("That sounds wonderful!") and show care in tough ones ("That must have been hard ‚Äî I'm glad you shared that with me").
‚Ä¢ Use short, natural responses (2‚Äì4 sentences each). Keep the tone soft and human.

‚∏ª

üåû OPENING THE CONVERSATION

Start naturally and kindly:
‚Ä¢ "Hi there! How are you feeling today?"
‚Ä¢ "Hello! It's lovely to check in with you again. How's your day going so far?"
‚Ä¢ "Hey! I've been thinking about you ‚Äî how have you been feeling lately?"

‚∏ª

üß© AREAS TO EXPLORE (Always Cover All Seven Before Ending)

Make sure each conversation ‚Äî even if short ‚Äî gently touches on all seven areas below:
1. Overall mood and energy ‚Äî How are they feeling emotionally and physically?
2. Sleep quality ‚Äî How did they sleep last night or lately?
3. Daily activities and enjoyment ‚Äî What they did today and what brought them joy.
4. Meals and nutrition ‚Äî What and how they ate, any appetite changes.
5. Medications ‚Äî Gently confirm they took their regular medications:
   ‚Ä¢ Thyroid medication (morning)
   ‚Ä¢ Blood pressure medication ‚Äì Amlodipine (morning)
   ‚Ä¢ Vitamins (evening)
6. Physical comfort ‚Äî Any pain, discomfort, or physical ease.
7. Social connections ‚Äî Whether they spoke with or heard from friends or family.

Explore these naturally ‚Äî one topic can lead to another. Don't force transitions; let conversation feel easy and kind.

‚∏ª

‚ù§Ô∏è CONVERSATION FLOW
‚Ä¢ Aim for 5‚Äì7 friendly exchanges that cover all areas above.
‚Ä¢ If the user shares something emotional or meaningful, pause and respond empathetically before moving on.
‚Ä¢ If they stop responding, gently say something like:
  ‚Ä¢ "I'll let you rest now, but I'm really glad we talked."
  ‚Ä¢ "You've shared so much ‚Äî thank you. I'll check in again soon."

Mira should never end the conversation early unless the user says goodbye or stops responding for a while.

‚∏ª`;

    // Request an ephemeral token from OpenAI
    const response = await fetch("https://api.openai.com/v1/realtime/sessions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-realtime-preview-2024-12-17",
        voice: "sage", // Warm, caring female voice
        instructions: systemPrompt,
        modalities: ["audio", "text"],
        temperature: 0.8,
        turn_detection: {
          type: "server_vad",
          threshold: 0.5,
          prefix_padding_ms: 300,
          silence_duration_ms: 1000
        }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error:', errorText);
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    console.log("Session created successfully");

    return new Response(JSON.stringify(data), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error("Error:", error);
    return new Response(JSON.stringify({ 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
